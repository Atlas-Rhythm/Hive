openapi: 3.0.0
info:
  title: Hive
  version: '1.0'
servers:
  - url: 'https://localhost:5001'
paths:
  /auth_server:
    get:
      summary: Get the URI location to the Auth Server linked to this Hive Instance
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      operationId: get-auth_server
  /mods:
    parameters:
      - name: page
        description: |
          The page of mods to request. Defaults to 0.
        in: query
        required: false
        schema:
          type: number
      - name: language
        description: |
          The ISO identifier of the lanugage to get mod info in.
        in: query
        required: false
        schema:
          type: string
    get:
      summary: 'Gets all of the mods in the specified channel(s), or a default if none is specified.'
      parameters:
        - name: channelIds
          description: The IDs of the channels to look up mods in
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            uniqueItems: true
        - schema:
            type: string
          in: query
          name: gameVersion
          description: Game version to filter by
        - schema:
            type: string
            enum:
              - all
              - latest
            default: latest
          in: query
          name: filterType
          description: How to filter the returned mods
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Mod'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      operationId: get-mods
      description: |-
        Gets all mods for a given channelId and channelIds to look within.
        Query parameters left empty will use defaults.
        channelIds defaults to an empty array, which will default to look in the instance default channel.
        gameVersion defaults to latest.
        filterType defaults to latest.

        Options for filterType are:
        all: Returns all versions for each mod listed in the channel(s).
        latest: Returns only the latest versions for each mod listed in the channel(s).
  '/mod/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Gets a mod from the ID specified
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mod'
              examples: {}
            application/xml:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      operationId: get-mod-modId
      parameters:
        - schema:
            type: string
          in: query
          name: range
          description: The version range of the mod to obtain
        - schema:
            type: array
          in: header
          name: Accept-Language
          description: The languages to return the localized mod for
      description: |-
        Gets a mod from a given mod ID and version range. If range is not specified, assumes range=*.
        If a list of languages are provided via Accept-Language, will try to return the best LocalizedModData that matches.
        If no languages are provided, or a previous match was not found, defaults to the system culture.
        If the system culture does not exist, uses the first LocalizedModData of the matching mod.
      security:
        - vaulthAuth: []
  '/mod/upload/{modId}':
    parameters:
      - schema:
          type: string
        name: modId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-mod-upload-modId
      security:
        - vaulthAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mod'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      description: Posts a mod
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Mod'
      parameters:
        - schema:
            type: string
          in: query
          name: modId
          description: Mod ID to upload to
          required: true
  /game/versions:
    get:
      summary: Returns all game versions.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameVersion'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      operationId: get-game-versions
      description: Returns a list of all game versions stored in the instance.
      security:
        - vaulthAuth: []
  /resolve_dependencies:
    post:
      summary: ''
      operationId: post-resolve_dependencies
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  message:
                    type: string
                  additionalMods:
                    $ref: '#/components/schemas/Mod'
                required:
                  - message
                  - additionalMods
        '418':
          description: I'm a teapot (RFC 2324)
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  message:
                    type: string
                  missing:
                    type: array
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/Mod'
                  conflicts:
                    type: array
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/Mod'
                  versionMismatching:
                    type: array
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/Mod'
                required:
                  - message
                  - missing
                  - conflicts
                  - versionMismatching
      description: |-
        Returns a list of mods that should be installed to resolve all dependencies.
        If the dependencies cannot be resolved, returns a non-200 status code and an empty array.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ModIdentifierRange'
        description: Mods to resolve
  '/mod/move/{channelId}':
    parameters:
      - schema:
          type: string
        name: channelId
        in: path
        required: true
    post:
      summary: ''
      operationId: post-mod-move-channelId
      security:
        - vaulthAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request. Invalid JSON was posted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: Unauthorized. The user is not logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: Not Found. There was no mod found with the given ID and version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModIdentifier'
            examples: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: The specific mod identifier to move. A mod ID and specific version.
      description: Moves a specific ModIdentifier to the provided channelId.
  /channels:
    get:
      summary: 'Gets all publicly viewable channels, or all channels viewable by the given user'
      tags: []
      security:
        - vaulthAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'
                uniqueItems: true
            application/xml:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      operationId: get-channels
      description: |-
        Gets all channels that are publicly viewable.
        When passed with an auth header, then it will return all channels viewable to the authorized user.
  /instance:
    get:
      summary: Get basic information about this Hive instance.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: get-instance
      description: |-
        Get basic information about this Hive instance.
        Information can be exposed and hidden on a per-instance basis.
  '/mod/{id}/latest':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mod'
              examples: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
      operationId: get-mod-modId-latest
      description: 'Returns the latest mod with the provided ID. This is equivalent to calling: /mod/{id}?range=*'
      parameters: []
      security:
        - vaulthAuth: []
components:
  schemas:
    Channel:
      type: object
      title: Channel
      additionalProperties: false
      description: A channel object
      properties:
        name:
          type: string
          minLength: 1
        isPublic:
          type: boolean
        additionalData:
          type: object
      required:
        - name
        - isPublic
        - additionalData
    Mod:
      type: object
      title: Mod
      description: A mod.
      additionalProperties: false
      properties:
        id:
          type: string
        version:
          type: string
        uploaderId:
          type: string
        authorIds:
          type: array
          items:
            type: string
        contributorIds:
          type: array
          items:
            type: string
        channelId:
          type: string
        links:
          type: array
          minItems: 0
          items:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
              url:
                type: string
            required:
              - name
              - url
        downloadLink:
          type: string
        additionalData:
          type: object
        localizedData:
          $ref: '#/components/schemas/LocalizedModData'
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/ModIdentifierRange'
        conflicts:
          type: array
          items:
            $ref: '#/components/schemas/ModIdentifierRange'
        gameVersions:
          type: array
          items:
            type: string
      required:
        - id
        - version
        - uploaderId
        - authorIds
        - contributorIds
        - channelId
        - links
        - downloadLink
        - additionalData
        - localizedData
        - dependencies
        - conflicts
        - gameVersions
    LocalizedModData:
      type: object
      title: LocalizedModData
      description: Localized data of a mod.
      additionalProperties: false
      properties:
        language:
          type: string
        name:
          type: string
        description:
          type: string
        changelog:
          type: string
        credits:
          type: string
      required:
        - language
        - name
        - description
    GameVersion:
      type: object
      title: GameVersion
      additionalProperties: false
      properties:
        name:
          type: string
        additionalData:
          type: object
      required:
        - name
        - additionalData
    ModIdentifierRange:
      type: object
      title: ModIdentifierRange
      description: A mod ID paired with a version range.
      additionalProperties: false
      properties:
        name:
          type: string
        versionRange:
          type: string
      required:
        - name
        - versionRange
    Exception:
      title: Exception
      type: object
      description: |-
        When an exception occurs, or a non-200 status code is returned, this model is returned.
        This model MAY have more or less fields than what is listed, but will always contain at least a statusCode.
      properties:
        statusCode:
          type: integer
          description: Status code of the response
        message:
          type: string
          description: Message of the problem that ocurred
      required:
        - statusCode
    ModIdentifier:
      type: object
      title: ModIdentifier
      additionalProperties: false
      properties:
        id:
          type: string
        version:
          type: string
      required:
        - id
        - version
      description: A mod ID paired with a specific version.
  securitySchemes:
    vaulthAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Authentication information is invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
