type Query {
	channels(page: Int): [Channel]
	channel(name: String!): Channel
	mods: [Mod]
	mod(id: ID!): Mod
	modsByUser(userID: ID!): [Mod]
}

type User {
	userID: ID!
	username: String!
}

type Channel {
	name: String!
	additionalData: String!
}

type Mod {
	id: ID!
	version: String!
	uploaderId: String!
	authorIds: [String!]
	contributorIds: [String!]
	channelId: String!
	links: [URL!]
	downloadLink: String!
	additionalData: String!
	localizedData: LocalizedModData
	dependencies: [ModIdentifier!]
	conflicts: [ModIdentifier!]
	gameVersions: [String!]
}

type LocalizedModData {
	language: String!
	name: String!
	description: String!
	changelog: String
	credits: String
}

type GameVersion {
	name: String!
	additionalData: String!
}

type ModIdentifier {
	name: String!
	versionRange: String!
}

type URL {
	name: String!
	url: String!
}

type Response {
	isSuccess: Boolean!
}

input PermissionInput {
	user: ID!
	permission: String
}

input ChannelInput {
	name: String!
	isPublic: Boolean!
	additionalData: String
}

input ModInput {
	contributors: [ID]
	authors: [ID]
	uploader: ID
	channel: ID
	links: [String]
}

type Mutation {
	addPermission(
		input: PermissionInput
	): User
	removePermission(
		input: PermissionInput
	): User
	createChannel(
		input: ChannelInput
	): Channel
	updateChannel(
		id: ID!
		input: ChannelInput
	): Channel
	deleteChannel(
		id: ID!
	): Response
	updateMod(
		id: ID!
		input: ModInput
	): Mod
	deleteMod(
		id: ID!
	): Response
}

schema {
	query: Query,
	mutation: Mutation
}